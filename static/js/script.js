const tg = window.Telegram.WebApp;
tg.expand(); // –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º Web App –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω

let currentPage = "menu"; // –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
let currentTextId = null; // ID —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞

async function navigateTo(page) {
    currentPage = page;
    sessionStorage.setItem('currentPage', page);
    document.getElementById('content').innerHTML = '';

    if (page === "menu") showMainMenu();
    if (page === "new_text") showNewTextForm();
    if (page === "search") showSearch();
    if (page === "documents") await showTexts();
    if (page === "question") showQuestionForm(currentTextId);
}

async function apiRequest(url, method = 'GET', body = null) {
    const headers = { 'Content-Type': 'application/json' };

    if (body) console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", url, body);

    const response = await fetch(url, {
        method,
        headers,
        body: method !== 'GET' ? JSON.stringify(body) : null
    });

    if (!response.ok) {
        const errorText = await response.text();
        console.error("–û—à–∏–±–∫–∞ API:", errorText);
        throw new Error(errorText);
    }

    return response.json();
}

// üöÄ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function showMainMenu() {
    document.getElementById('content').innerHTML = `
        <div class="card">
            <h2>–°—Ç–∞—Ä–æ—Ä—É—Å—Å–∫–∏–µ —Ç–µ–∫—Å—Ç—ã</h2>
            <button onclick="navigateTo('new_text')">üìù –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç</button>
            <button onclick="navigateTo('documents')">üìö –ú–æ–∏ —Ç–µ–∫—Å—Ç—ã</button>
            <button onclick="navigateTo('question')">‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å</button>
            <button onclick="navigateTo('search')">üîç –ü–æ–∏—Å–∫</button>
        </div>`;
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener("DOMContentLoaded", () => {
    showMainMenu();
});


// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Ä–µ—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –æ—Ç–ª–∞–¥–∫–æ–π
function isPreReformRussianText(text) {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã—Ö –±—É–∫–≤ –¥–æ—Ä–µ—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞
    const preReformCharacters = ['—£', '—ñ', '—≥', '—µ', '—ä', '—ï', '—°', '—Ø', '—±', '—ß', '—´'];
    const hasPreReformCharacters = preReformCharacters.some(char => text.includes(char));
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤ —Å –æ–∫–æ–Ω—á–∞–Ω–∏—è–º–∏ –Ω–∞ —ä
    // –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª–æ–≤ —Å —ä –Ω–∞ –∫–æ–Ω—Ü–µ
    const hasTrailingHardSign = /\S+—ä\b/.test(text);
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    // –ë–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –∏—Å–∫–ª—é—á–∞—é—â–∞—è –ª–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
    const questionPatterns = [
        /\?/, // –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫
        /\b–∫–∞–∫\s+/, // "–∫–∞–∫" —Å –ø—Ä–æ–±–µ–ª–æ–º –ø–æ—Å–ª–µ
        /\b–ø–æ—á–µ–º—É\s+/, // "–ø–æ—á–µ–º—É" —Å –ø—Ä–æ–±–µ–ª–æ–º –ø–æ—Å–ª–µ
        /\b–∑–∞—á–µ–º\s+/, // "–∑–∞—á–µ–º" —Å –ø—Ä–æ–±–µ–ª–æ–º –ø–æ—Å–ª–µ
        /\b—á—Ç–æ\s+—Ç–∞–∫–æ–µ\b/, // "—á—Ç–æ —Ç–∞–∫–æ–µ" –∫–∞–∫ —Ñ—Ä–∞–∑–∞
        /\b—Ä–∞—Å—Å–∫–∞–∂–∏\s+/, // "—Ä–∞—Å—Å–∫–∞–∂–∏" —Å –ø—Ä–æ–±–µ–ª–æ–º –ø–æ—Å–ª–µ
        /\b–æ–±—ä—è—Å–Ω–∏\s+/, // "–æ–±—ä—è—Å–Ω–∏" —Å –ø—Ä–æ–±–µ–ª–æ–º –ø–æ—Å–ª–µ
        /\b–∫—Ç–æ\s+/ // "–∫—Ç–æ" —Å –ø—Ä–æ–±–µ–ª–æ–º –ø–æ—Å–ª–µ
    ];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    const hasQuestionStructure = questionPatterns.some(pattern => pattern.test(text));
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞ (–≤–æ–ø—Ä–æ—Å—ã –æ–±—ã—á–Ω–æ –∫–æ—Ä–æ—á–µ)
    const isLongEnough = text.length > 50;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–Ω –≤–µ—Ä—Å–∏–∏)
    console.log('Validation debug:');
    console.log('- Has pre-reform characters:', hasPreReformCharacters);
    console.log('- Has trailing hard sign:', hasTrailingHardSign);
    console.log('- Has question structure:', hasQuestionStructure);
    console.log('- Is long enough:', isLongEnough);
    
    // –¢–µ–∫—Å—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –¥–æ—Ä–µ—Ñ–æ—Ä–º–µ–Ω–Ω—ã–º, –µ—Å–ª–∏:
    // - –µ—Å—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –±—É–∫–≤—ã –ò–õ–ò –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–∞ —ä
    // - –ù–ï–¢ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    // - –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –¥–ª–∏–Ω–∞
    return (hasPreReformCharacters || hasTrailingHardSign) && !hasQuestionStructure && isLongEnough;
}

// üöÄ –≠–∫—Ä–∞–Ω –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
function showNewTextForm() {
    document.getElementById('content').innerHTML =` 
        <div class="card">
            <h3>–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç</h3>
            <textarea id="original-text" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä–æ—Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç"></textarea>
            <button onclick="processText()">–û–±—Ä–∞–±–æ—Ç–∞—Ç—å</button>
            <button onclick="navigateTo('menu')">–ù–∞–∑–∞–¥</button>
        </div>`;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π
async function processText() {
    const text = document.getElementById('original-text').value;
    if (!text) {
        showAlert('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    const isValid = isPreReformRussianText(text);
    console.log('Text validation result:', isValid);
    
    if (!isValid) {
        showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ –¥–æ—Ä–µ—Ñ–æ—Ä–º–µ–Ω–Ω–æ–º —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. ' +
                 '–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –±—É–∫–≤—ã —Å—Ç–∞—Ä–æ–π –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ ' +
                 '–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –≤–æ–ø—Ä–æ—Å.');
        return;
    }
    
    showLoader();
    try {
        const response = await apiRequest('/api/translate/', 'POST', { text });
        document.getElementById('content').innerHTML = `
            <div class="card">
                <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç</h3>
                <h4>–û—Ä–∏–≥–∏–Ω–∞–ª:</h4><p>${text}</p>
                <h4>–ü–µ—Ä–µ–≤–æ–¥:</h4><p>${response.translation}</p>
                <h4>–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è:</h4><p>${response.summary}</p>
                <h4>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</h4><p>${response.keywords.join(', ')}</p>
                <button onclick="navigateTo('menu')">–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</button>
            </div>`;
    } catch (error) {
        showAlert('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ' + (error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    }
}

// Helper function for showing alerts - completely custom implementation
function showAlert(message) {
    // Create custom alert element
    const alertDiv = document.createElement('div');
    alertDiv.className = 'custom-alert';
    alertDiv.innerHTML = `
        <div class="alert-content">
            <p>${message}</p>
            <button onclick="this.parentElement.parentElement.remove()">OK</button>
        </div>
    `;
    document.body.appendChild(alertDiv);
    
    // Add CSS if not already present
    if (!document.getElementById('alert-styles')) {
        const style = document.createElement('style');
        style.id = 'alert-styles';
        style.innerHTML = `
            .custom-alert {
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: rgba(0,0,0,0.5);
                display: flex;
                align-items: center;
                justify-content: center;
                z-index: 1000;
            }
            .alert-content {
                background: white;
                padding: 20px;
                border-radius: 8px;
                max-width: 80%;
                text-align: center;
            }
            .alert-content button {
                margin-top: 15px;
                padding: 8px 16px;
                background: #5288c1;
                color: white;
                border: none;
                border-radius: 4px;
                cursor: pointer;
            }
        `;
        document.head.appendChild(style);
    }
}

// üöÄ –≠–∫—Ä–∞–Ω –ø–æ–∏—Å–∫–∞
function showSearch() {
    document.getElementById('content').innerHTML = `
        <div class="card">
            <h3>–ü–æ–∏—Å–∫</h3>
            <input type="text" id="search-input" class="search-input" placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å">
            <button onclick="performSearch()">üîç –ò—Å–∫–∞—Ç—å</button>
            <button onclick="navigateTo('menu')">–ù–∞–∑–∞–¥</button>
            <div id="search-results"></div>
        </div>`;
}

// üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –≤ API
async function performSearch() {
    const query = document.getElementById('search-input').value;
    if (!query) return;

    document.getElementById('search-results').innerHTML = `<div class="loader"></div>`;
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
        const response = await apiRequest('/api/search/', 'POST', { query, top_k: 5 });
        
        let resultsHtml = response.results.length
            ? response.results.map(doc => `
                <div class="text-card">
                    <p>
                      <strong>${doc.title} (${doc.year})</strong>
                      <span style="font-size: 0.9em; color: #666;">(–°—Ö–æ–¥—Å—Ç–≤–æ: ${(doc.similarity * 100).toFixed(2)}%)</span>
                    </p>
                    <p>${doc.summary.slice(0, 100)}...</p>
                    <button onclick="showTextDetail(${doc.id})">–û—Ç–∫—Ä—ã—Ç—å</button>
                </div>`).join('')
            : '<p>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>';

        document.getElementById('search-results').innerHTML = resultsHtml;
    } catch (error) {
        showError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ' + error.message);
    }
}



function showError(message) {
    if (window.Telegram?.WebApp?.version && parseFloat(window.Telegram.WebApp.version) >= 6.1) {
        window.Telegram.WebApp.showAlert(message);
    } else {
        alert(message);  // –û–±—ã—á–Ω—ã–π alert –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ –∏–ª–∏ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π Telegram
    }
}

// üöÄ –≠–∫—Ä–∞–Ω —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
async function showTexts() {
    showLoader();
    try {
        const response = await apiRequest('/api/documents/', 'GET');
        console.log("–î–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", response);
        document.getElementById('content').innerHTML = `
            <div class="card">
                <h3>–î–æ–∫—É–º–µ–Ω—Ç—ã</h3>
                ${response.results.map(doc => `
                    <div class="text-card">
                        <p><strong>${doc.title} (${doc.year})</strong></p>
                        <p>${doc.summary.slice(0, 100)}...</p>
                        <button onclick="showTextDetail(${doc.id})">–û—Ç–∫—Ä—ã—Ç—å</button>
                    </div>`).join('')}
                <button onclick="navigateTo('menu')">–ù–∞–∑–∞–¥</button>
            </div>`;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:", error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ' + error.message);
    }
}

// üöÄ –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
async function showTextDetail(textId) {
    showLoader();
    try {
        const response = await apiRequest(`/api/documents/${textId}`, 'GET');
        currentTextId = textId;

        document.getElementById('content').innerHTML = `
            <div class="card">
                <h3>${response.title} (${response.year})</h3>
                <h4>–û—Ä–∏–≥–∏–Ω–∞–ª:</h4><p>${response.original_text}</p>
                <h4>–ü–µ—Ä–µ–≤–æ–¥:</h4><p>${response.modern_translation}</p>
                <h4>–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è:</h4><p>${response.summary}</p>
                <button onclick="navigateTo('question')">–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å</button>
                <button onclick="navigateTo('documents')">–ù–∞–∑–∞–¥</button>
            </div>`;
    } catch (error) {
        tg.showAlert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: ' + error.message);
    }
}

// üöÄ –§–æ—Ä–º–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
function showQuestionForm() {
    document.getElementById('content').innerHTML = `
        <div class="card">
            <h3>–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å</h3>
            <textarea id="question-input" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å"></textarea>
            <button onclick="submitQuestion()">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
            <button onclick="navigateTo('menu')">–ù–∞–∑–∞–¥</button>
        </div>`;
}

// üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –∫ API
async function submitQuestion() {
    const question = document.getElementById('question-input').value;
    if (!question || !currentTextId) return tg.showAlert("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç!");

    showLoader();
    try {
        const response = await apiRequest('/api/questions/', 'POST', { text_id: currentTextId, question });
        document.getElementById('content').innerHTML = `
            <div class="card">
                <h3>–û—Ç–≤–µ—Ç</h3>
                <p>${response.answer}</p>
                <button onclick="navigateTo('menu')">–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</button>
            </div>`;
    } catch (error) {
        tg.showAlert('–û—à–∏–±–∫–∞: ' + error.message);
    }
}

// üöÄ –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∑—á–∏–∫
function showLoader() {
    document.getElementById('content').innerHTML = `<div class="loader"></div>`;
}

// üöÄ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
document.addEventListener("DOMContentLoaded", () => {
    const lastPage = sessionStorage.getItem('currentPage') || "menu";
    navigateTo(lastPage);
});
