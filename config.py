import os
import json
import logging
from dotenv import load_dotenv
from pyngrok import ngrok, conf
import pathlib
import sys

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


BASE_DIR = pathlib.Path(__file__).resolve().parent
sys.path.append(str(BASE_DIR)) 

# –ü—É—Ç—å –∫ .env
ENV_FILE = BASE_DIR / ".env"

# –ü—É—Ç—å –∫ bot_config.json (–¥–æ–ø—É—Å—Ç–∏–º, —É –≤–∞—Å –ø–∞–ø–∫–∞ telegram_bot/ –ª–µ–∂–∏—Ç —Ä—è–¥–æ–º —Å app/)
BOT_CONFIG_FILE = BASE_DIR / "telegram_bot" 
BOT_JSON_FILE = BOT_CONFIG_FILE / "bot_config.json"
# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv(dotenv_path=ENV_FILE)

# –¢–µ–ø–µ—Ä—å —á–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
DB_NAME = os.getenv("DB_NAME", "test_old_russian_texts.db")
API_HOST = os.getenv("API_HOST", "127.0.0.1")
API_PORT = int(os.getenv("API_PORT", 8000))
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
USE_NGROK = os.getenv("USE_NGROK", "False").lower() == "true"
NGROK_AUTH_TOKEN = os.getenv("NGROK_AUTH_TOKEN")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ç—É–Ω–Ω–µ–ª—è
NGROK_PUBLIC_URL = None

def setup_ngrok():
    global NGROK_PUBLIC_URL

    if not USE_NGROK:
        logger.info("Ngrok –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.")
        return None

    try:
        if not NGROK_AUTH_TOKEN:
            raise ValueError("Ngrok auth token –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ .env")

        conf.get_default().auth_token = NGROK_AUTH_TOKEN
        ngrok.kill()
        tunnel = ngrok.connect(API_PORT, bind_tls=True)
        NGROK_PUBLIC_URL = tunnel.public_url

        logger.info(f"üîó Ngrok –∑–∞–ø—É—â–µ–Ω: {NGROK_PUBLIC_URL}")

        # –û–±–Ω–æ–≤–ª—è–µ–º .env
        update_env_file("NGROK_PUBLIC_URL", NGROK_PUBLIC_URL)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –±–æ—Ç–∞
        update_bot_config(NGROK_PUBLIC_URL)

        return NGROK_PUBLIC_URL
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ngrok: {e}")
        return None

def update_env_file(key, value):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ .env —Ñ–∞–π–ª–µ (ENV_FILE).
    """
    env_vars = {}

    # –°—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ ENV_FILE
    if ENV_FILE.exists():
        with ENV_FILE.open("r", encoding="utf-8") as f:
            for line in f:
                if "=" in line:
                    k, v = line.strip().split("=", 1)
                    env_vars[k] = v

    # –û–±–Ω–æ–≤–ª—è–µ–º/–¥–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á
    env_vars[key] = value

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    with ENV_FILE.open("w", encoding="utf-8") as f:
        for k, v in env_vars.items():
            f.write(f"{k}={v}\n")

    logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ .env: {key}={value}")

def update_bot_config(web_app_url):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç telegram_bot/bot_config.json
    """
    try:
        config_data = {
            "TOKEN": TELEGRAM_BOT_TOKEN,
            "WEB_APP_URL": web_app_url
        }
        with BOT_JSON_FILE.open("w", encoding="utf-8") as f:
            json.dump(config_data, f, indent=4)

        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")

# –ó–∞–ø—É—Å–∫–∞–µ–º ngrok –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
setup_ngrok()
